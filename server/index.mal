; it's PHP jim, but not as we know it.
(def! CSV-HEADER "time,comment\n")
(def! WRITE-FLAGS 10) ;FILE_APPEND | LOCK_EX
(def! DATA-DIR "../data/")

(! header "Content-type: application/json")

(def! throw-error
  (fn* [c e]
       (do (! http_response_code c)
           (println (! json_encode {"error" e}))
           (php* "exit(1);"))))

(def! append-event-to-file
  (fn* [event-type event-comment]
       (let* [event-type-sanitised (! str_replace ["." "/" "\\" ":"] "" event-type)
              filename (str DATA-DIR event-type-sanitised ".csv")
              timestamp (! time)
              contents (str (! date "c" timestamp) "," (! json_encode event-comment) "\n")]
         (do
           ; ensure the file has a CSV header
           (if (not (! is_file filename))
             (! file_put_contents filename CSV-HEADER WRITE-FLAGS))
           ; stamp this event into the file
           (! file_put_contents filename contents WRITE-FLAGS)
           ; tell the user what we did
           (println (! json_encode {:success true :event-type event-type-sanitised :filename filename :comment event-comment :timestamp timestamp}))))))

(def! log-new-event
  (fn* [data]
       (let* [event-type (get data "event")
              event-comment (get data "comment")]
         (if event-type
           (append-event-to-file event-type event-comment)
           (throw-error 404 "No event supplied.")))))

(def! concatenate-all-csvs
  (fn* [events]
       ; add the CSV header with the extra "event" field for the filename
       (str "event," CSV-HEADER
            ; join together each parsed csv file
            (! implode "\n"
               (map
                 ; for every csv/event filename
                 (fn* [event]
                      ; grab the content of the csv
                      (let* [csv-content (! file_get_contents (str DATA-DIR event ".csv"))]
                        ; join the lines of the csv back together again
                        (! implode "\n"
                           ; loop through every line and add the event name
                           (map (fn* [line] (str event "," line))
                                ; filter out empty lines
                                (vals (! array_filter
                                         ; chop off the headline of the CSV as we already added one
                                         (rest (! explode "\n" csv-content))
                                         ; (function to filter out empty lines)
                                         (fn* [line] (not (or (= line "") (= line nil))))))))))
                 events)))))

(def! filter-for-csvs
  (fn* [files]
       (vals (! array_filter
                files
                (fn* [f]
                     (= (! substr f -4 4) ".csv"))))))

(def! process-http-request
  (fn* [vars]
  (let* [files (! scandir DATA-DIR)
         csvs (vals (! array_filter
                       files
                       (fn* [f] (= (! substr f -4 4) ".csv"))))
         event-names (map (fn* [f] (! substr f 0 -4)) csvs)]
    (cond 
      ; a get request always returns a list of available CSVs
      (= (get vars "REQUEST_METHOD") "GET")
      (println (! json_encode event-names))

      ; a PUT request writes a new line to the end of a CSV
      (= (get vars "REQUEST_METHOD") "POST")
      (log-new-event ($ "_POST"))))))

; *** main entry point *** ;

(if (! is_dir DATA-DIR)
  (process-http-request ($ "_SERVER"))
  (throw-error 404 "Data directory does not exist."))

